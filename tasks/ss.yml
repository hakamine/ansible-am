###########################################################
#  OS repository configuration and package dependencies
###########################################################

- name: Install Storage Service packages dependencies (dnf)
  ansible.builtin.dnf:
    name: "{{ item.name }}"
    enablerepo: "{{ item.enablerepo | default(omit) }}"
    update_cache: "{{ item.update_cache | default(omit) }}"
  loop: "{{ amr_ss_package_deps }}"
  when: amr_install_ss_package_deps | bool


###########################################################
#   Clone source repo related tasks
###########################################################

- name: Add Storage Service repo dir to git safe.directory
  ansible.builtin.import_tasks: tg-git-add-safe-dir.yml
  vars:
    __repo_full_path: "{{ [amr_src_path_base, 'archivematica-storage-service'] | ansible.builtin.path_join }}"

- name: "Checkout archivematica-storage-service code"
  ansible.builtin.git:
    repo: "{{ amr_ss_repo }}"
    dest: "{{ [amr_src_path_base, 'archivematica-storage-service'] | ansible.builtin.path_join }}"
    version: "{{ amr_ss_version }}"
    force: true
    accept_hostkey: true

- name: "Ensure the source code is readable by all"
  file:
    path: "{{ [amr_src_path_base, 'archivematica-storage-service'] | ansible.builtin.path_join }}"
    mode: "o+rX"
    recurse: "yes"

  
###########################################################
#   Virtualenv related tasks
###########################################################

- name: Create Storage Service virtualenv
  ansible.builtin.import_tasks: tg-create-virtualenv.yml
  vars:
    __virtualenv_path: "{{ [amr_virtualenv_path_base, 'archivematica-storage-service'] | ansible.builtin.path_join }}"
    __requirements_path: "{{ [amr_src_path_base, 'archivematica-storage-service'] | ansible.builtin.path_join }}"


###########################################################
#   Log files related config
###########################################################

- name: "Create archivematica-storage-service log directories"
  file:
    dest: "{{ amr_ss_log_dir }}"
    state: "directory"
    owner: "{{ amr_os_user_name }}"
    group: "{{ amr_os_group_name }}"
    mode: "g+s"

- name: Touch SS log files
  ansible.builtin.file:
    path: "{{ [amr_ss_log_dir, item] | ansible.builtin.path_join }}"
    owner: "{{ amr_os_user_name }}"
    group: "{{ amr_os_group_name }}"
    state: touch
    access_time: preserve
    modification_time: preserve
  loop:
    - "storage_service.log"
    - "storage_service_debug.log"

- name: Create/update SS logging config file (/etc/archivematica/)
  template:
    src: etc/archivematica/storageService.logging.json.j2
    dest: /etc/archivematica/storageService.logging.json
    backup: "yes"
    owner: root
    group: root
    mode: '0664'

###########################################################
#   Staging directory related config
###########################################################

- name: Check if staging directory exists
  ansible.builtin.stat:
    path: '/var/archivematica/storage_service'
  register: stgdir_st

- ansible.builtin.set_fact:
    create_stgdir: true
  when: stgdir_st.stat.exists is defined and not stgdir_st.stat.exists

- ansible.builtin.set_fact:
    create_stgdir: false
  when: stgdir_st.stat.exists is defined and stgdir_st.stat.exists

- name: Create staging directory (if it doesn't exist and there is no symlink to it)
  ansible.builtin.file:
    dest: '/var/archivematica/storage_service'
    state: directory
    owner: "{{ amr_os_user_name }}"
    group: "{{ amr_os_group_name }}"
  when: create_stgdir

###########################################################
# SS Django management commands related tasks
###########################################################

- name: "Run SS django collectstatic"
  community.general.django_manage:
    command: "collectstatic"
    app_path: "{{ amr_ss_app_path }}"
    virtualenv: "{{ [amr_virtualenv_path_base, 'archivematica-storage-service'] | ansible.builtin.path_join }}"
  environment: "{{ amr_ss_environment }}"

- name: "Run SS django compilemessages"
  community.general.django_manage:
    command: "compilemessages"
    app_path: "{{ amr_ss_app_path }}"
    virtualenv: "{{ [amr_virtualenv_path_base, 'archivematica-storage-service'] | ansible.builtin.path_join }}"
  environment: "{{ amr_ss_environment }}"

- name: "Run SS django database migrations"
  django_manage:
    command: "migrate"
    app_path: "{{ amr_ss_app_path }}"
    virtualenv: "{{ [amr_virtualenv_path_base, 'archivematica-storage-service'] | ansible.builtin.path_join }}"
  environment: "{{ amr_ss_environment }}"


###########################################################
# gunicorn / systemd related configuration
###########################################################

- name: Create/update storage service gunicorn configuration file (/etc/archivematica/)
  ansible.builtin.template:
    src: etc/archivematica/storage-service.gunicorn-config.py.j2
    dest: /etc/archivematica/storage-service.gunicorn-config.py
    backup: true
    owner: root
    group: root
    mode: 0644
  notify: Restart Storage Service (systemd)

- name: Create/update storage service gunicorn systemd service file (/etc/systemd)
  ansible.builtin.template:
    src: etc/systemd/system/archivematica-storage-service.service.j2
    dest: /etc/systemd/system/archivematica-storage-service.service
    backup: true
    owner: root
    group: root
    mode: 0644
  notify: Restart Storage Service (systemd)

- name: Add storage service gunicorn systemd env file
  ansible.builtin.template:
    src: etc/sysconfig/archivematica-storage-service.j2
    dest: "{{ [amr_envvar_file_path, 'archivematica-storage-service'] | ansible.builtin.path_join }}"
    backup: true
    owner: root
    group: root
    mode: 0644
  notify: Restart Storage Service (systemd)

- name: Enable and start Storage Service (systemd)
  ansible.builtin.systemd_service:
    name: archivematica-storage-service
    state: started
    enabled: true
    daemon_reload: true
