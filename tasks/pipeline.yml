###########################################################
#  OS repository configuration and package dependencies
###########################################################

- name: Install pipeline packages dependencies (dnf)
  ansible.builtin.dnf:
    name: "{{ item.name }}"
    enablerepo: "{{ item.enablerepo | default(omit) }}"
    update_cache: "{{ item.update_cache | default(omit) }}"
  loop: "{{ amr_pipeline_package_deps }}"
  when: 
    - amr_install_pipeline_package_deps | bool
    - ansible_os_family in ['RedHat']

- name: Install pipeline repositories (deb822)
  ansible.builtin.deb822_repository:
    name: "{{ item.name | default(omit) }}"
    types: "{{ item.types | default(omit) }}"
    architectures: "{{ item.architectures | default(omit) }}"
    uris: "{{ item.uris | default(omit) }}"
    suites: "{{ item.suites | default(omit) }}"
    components: "{{ item.components | default(omit) }}"
    signed_by: "{{ item.signed_by | default(omit) }}"
  loop: "{{ amr_pipeline_repos }}"
  when: 
    - amr_install_pipeline_repos | bool
    - ansible_os_family in ['Debian']

- name: Install pipeline packages dependencies (apt)
  ansible.builtin.apt:
    name: "{{ item.name }}"
    update_cache: "{{ item.update_cache | default(omit) }}"
  loop: "{{ amr_pipeline_package_deps }}"
  when: 
    - amr_install_pipeline_package_deps | bool
    - ansible_os_family in ['Debian']


###########################################################
#   Clone source repo related tasks
###########################################################

- name: Add pipeline repo dir to git safe.directory
  ansible.builtin.import_tasks: tg-git-add-safe-dir.yml
  vars:
    __repo_full_path: "{{ [amr_src_path_base, 'archivematica'] | ansible.builtin.path_join }}"

- name: Checkout pipeline code
  ansible.builtin.git:
    repo: "{{ amr_pipeline_repo }}"
    dest: "{{ [amr_src_path_base, 'archivematica'] | ansible.builtin.path_join }}"
    version: "{{ amr_pipeline_version }}"
    force: true
    accept_hostkey: true
    recursive: false

- name: "Ensure the source code is readable by all"
  file:
    path: "{{ [amr_src_path_base, 'archivematica'] | ansible.builtin.path_join }}"
    mode: "o+rX"
    recurse: "yes"

  
###########################################################
#   Virtualenv related tasks
###########################################################

- name: Create pipeline virtualenv
  ansible.builtin.import_tasks: tg-create-virtualenv.yml
  vars:
    __virtualenv_path: "{{ [amr_virtualenv_path_base, 'archivematica'] | ansible.builtin.path_join }}"
    __requirements_path: "{{ [amr_src_path_base, 'archivematica'] | ansible.builtin.path_join }}"

###########################################################
#   Log files related config
###########################################################

- name: "Create archivematica pipeline log directories"
  ansible.builtin.file:
    dest: "{{ item }}"
    state: "directory"
    owner: "{{ amr_os_user_name }}"
    group: "{{ amr_os_group_name }}"
    mode: "g+s"
  loop:
    - "{{ amr_dashboard_log_dir }}"
    - "{{ amr_mcpserver_log_dir }}"
    - "{{ amr_mcpclient_log_dir }}"

- name: Touch pipeline log files
  ansible.builtin.file:
    path: "{{ [ item.logdir, item.filename ] | ansible.builtin.path_join }}"
    owner: "{{ amr_os_user_name }}"
    group: "{{ amr_os_group_name }}"
    state: touch
    access_time: preserve
    modification_time: preserve
  loop:
    - logdir: "{{ amr_dashboard_log_dir }}"
      filename: "dashboard.log"
    - logdir: "{{ amr_dashboard_log_dir }}"
      filename: "dashboard.debug.log"
    - logdir: "{{ amr_mcpserver_log_dir }}"
      filename: "MCPServer.log"
    - logdir: "{{ amr_mcpserver_log_dir }}"
      filename: "MCPServer.debug.log"
    - logdir: "{{ amr_mcpclient_log_dir }}"
      filename: "MCPClient.log"
    - logdir: "{{ amr_mcpclient_log_dir }}"
      filename: "MCPClient.debug.log"

- name: Create/update pipelie logging config files (/etc/archivematica/)
  ansible.builtin.template:
    src: "etc/archivematica/{{ item }}.logging.json.j2"
    dest: "/etc/archivematica/{{ item }}.logging.json"
    backup: "yes"
    owner: root
    group: root
    mode: '0664'
  loop:
    - "dashboard"
    - "serverConfig"
    - "clientConfig"

###########################################################
#   Shared directory related config
###########################################################

# - The "Shared Directory" (/var/archivematica/sharedDirectory) seems
#   to be still hardcoded in some parts of the source code (i.e., 
#   changing its value in the configuration may break the app)
# - When needing to move it to a different volume/path (e.g., due to disk
#   space issues) use symlinks

- name: Check if shared directory exists
  ansible.builtin.stat:
    path: '/var/archivematica/sharedDirectory'
  register: shareddir_st

- ansible.builtin.set_fact:
    create_shareddir: true
  when: shareddir_st.stat.exists is defined and not shareddir_st.stat.exists

- ansible.builtin.set_fact:
    create_shareddir: false
  when: shareddir_st.stat.exists is defined and shareddir_st.stat.exists

- name: Create shared directory (if it doesn't exist and there is no symlink to it)
  ansible.builtin.file:
    dest: '/var/archivematica/sharedDirectory'
    state: directory
    owner: "{{ amr_os_user_name }}"
    group: "{{ amr_os_group_name }}"
  when: create_shareddir

###########################################################
# Dashboard frontend (npm) related tasks
###########################################################

# Note: npm needs to be run as non-root in order to build properly
# (https://stackoverflow.com/questions/18136746/npm-install-failed-with-cannot-run-in-wd)

- name: "Change ownership of build directories to archivematica"
  file:
    dest: "{{ item }}"
    state: "directory"
    owner: "{{ amr_os_user_name }}"
    group: "{{ amr_os_group_name }}"
    recurse: "yes"
  loop:
    - "{{ [amr_src_path_base, 'archivematica/src/dashboard/src/media' ] | ansible.builtin.path_join }}"
    - "{{ [amr_src_path_base, 'archivematica/src/dashboard/frontend' ] | ansible.builtin.path_join }}"

- name: Install front-end dependencies
  become: true
  become_user: "{{ amr_os_user_name }}"
  ansible.builtin.command: npm install
  args:
    chdir: "{{ [amr_src_path_base, 'archivematica/src/dashboard/frontend' ] | ansible.builtin.path_join }}"

###########################################################
# Dashboard Django management commands related tasks
###########################################################

- name: "Run Dashboard django collectstatic"
  community.general.django_manage:
    command: "collectstatic"
    app_path: "{{ amr_dashboard_app_path }}"
    pythonpath: "{{ amr_amcommon_app_path }}"
    virtualenv: "{{ [amr_virtualenv_path_base, 'archivematica'] | ansible.builtin.path_join }}"
  environment: "{{ amr_dashboard_environment }}"

- name: "Run Dashboard django compilemessages"
  community.general.django_manage:
    command: "compilemessages"
    app_path: "{{ amr_dashboard_app_path }}"
    pythonpath: "{{ amr_amcommon_app_path }}"
    virtualenv: "{{ [amr_virtualenv_path_base, 'archivematica'] | ansible.builtin.path_join }}"
  environment: "{{ amr_dashboard_environment }}"

- name: "Run Dashboard django migrate"
  tags: am-pipeline-db-migrate
  community.general.django_manage:
    command: "migrate"
    app_path: "{{ amr_dashboard_app_path }}"
    pythonpath: "{{ amr_amcommon_app_path }}"
    virtualenv: "{{ [amr_virtualenv_path_base, 'archivematica'] | ansible.builtin.path_join }}"
  environment: "{{ amr_dashboard_environment }}"

- name: "Ensure the generated artifacts are readable by all"
  ansible.builtin.file:
    path: "{{ [amr_src_path_base, 'archivematica'] | ansible.builtin.path_join }}"
    mode: "o+rX"
    recurse: "yes"

###########################################################
# gunicorn / systemd related configuration
###########################################################

- name: Create/update Dashboard gunicorn configuration file (/etc/archivematica/)
  tags: am-pipeline-svc-config
  ansible.builtin.template:
    src: etc/archivematica/dashboard.gunicorn-config.py.j2
    dest: /etc/archivematica/dashboard.gunicorn-config.py
    backup: true
    owner: root
    group: root
    mode: 0644
  notify: Restart Dashboard (systemd)

- name: Create/update pipeline systemd service files (/etc/systemd)
  tags: am-pipeline-svc-config
  ansible.builtin.template:
    src: "etc/systemd/system/{{ item }}.service.j2"
    dest: /etc/systemd/system/{{ item }}.service
    backup: true
    owner: root
    group: root
    mode: 0644
  loop:
    - archivematica-dashboard
    - archivematica-mcp-client
    - archivematica-mcp-server
  notify: Restart Archivematica pipeline (systemd)

- name: Create/update pipeline service env files
  tags: am-pipeline-svc-config
  ansible.builtin.template:
    src: "etc/sysconfig/{{ item }}.j2"
    dest: "{{ [amr_envvar_file_path, item] | ansible.builtin.path_join }}"
    backup: true
    owner: root
    group: root
    mode: 0644
  loop:
    - archivematica-dashboard
    - archivematica-mcp-client
    - archivematica-mcp-server
  notify: Restart Archivematica pipeline (systemd)

- name: Enable and start pipeline services (systemd)
  tags: am-pipeline-svc-config
  ansible.builtin.systemd_service:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  loop:
    - archivematica-mcp-server
    - archivematica-mcp-client
    - archivematica-dashboard

###########################################################
# systemd related configuration for additional MCP client instances
###########################################################

- name: Create/update additional MCP client systemd service files (/etc/systemd)
  tags: am-pipeline-svc-config
  ansible.builtin.template:
    src: "etc/systemd/system/archivematica-mcp-client-addit.service.j2"
    dest: "/etc/systemd/system/archivematica-mcp-client-{{ '%1d' | format(item) }}.service"
    backup: true
    owner: root
    group: root
    mode: 0644
  loop: "{{ range(2, amr_pipeline_mcpclient_instances|int + 1 ) }}"
  notify: Restart Archivematica pipeline (systemd)
  when: amr_pipeline_mcpclient_instances > 1

- name: Create/update additional MCP client service env files
  tags: am-pipeline-svc-config
  ansible.builtin.template:
    src: "etc/sysconfig/archivematica-mcp-client-addit.j2"
    dest: "{{ [amr_envvar_file_path, 'archivematica-mcp-client-%1d' | format(item) ] | ansible.builtin.path_join }}"
    backup: true
    owner: root
    group: root
    mode: 0644
  vars:
    amr_mcpclient_addit_environment: "{{ amr_mcpclient_environment | ansible.builtin.combine({'ARCHIVEMATICA_MCPCLIENT_MCPCLIENT_PROMETHEUS_BIND_PORT': amr_pipeline_mcpclient_prometheus_bind_port|int + item - 1 }, list_merge='append_rp') }}"
  loop: "{{ range(2, amr_pipeline_mcpclient_instances|int + 1 ) }}"
  notify: Restart Archivematica pipeline (systemd)
  when: amr_pipeline_mcpclient_instances > 1

- name: Enable and start additional MCP client services (systemd)
  tags: am-pipeline-svc-config
  ansible.builtin.systemd_service:
    name: "archivematica-mcp-client-{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  loop: "{{ range(2, amr_pipeline_mcpclient_instances|int + 1 ) }}"
  when: amr_pipeline_mcpclient_instances > 1
